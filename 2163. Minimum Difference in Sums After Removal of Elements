You are given a 0-indexed integer array nums consisting of 3 * n elements.

You are allowed to remove any subsequence of elements of size exactly n from nums. The remaining 2 * n elements will be divided into two equal parts:

The first n elements belonging to the first part and their sum is sumfirst.
The next n elements belonging to the second part and their sum is sumsecond.
The difference in sums of the two parts is denoted as sumfirst - sumsecond.

For example, if sumfirst = 3 and sumsecond = 2, their difference is 1.
Similarly, if sumfirst = 2 and sumsecond = 3, their difference is -1.
Return the minimum difference possible between the sums of the two parts after the removal of n elements.

import heapq

class Solution:
    def minimumDifference(self, nums):
        n = len(nums) // 3
        total_len = len(nums)

        # Max heap for left part (simulate max heap using negative values)
        max_heap = []
        left_sum = 0
        left_prefix = [0] * total_len

        for i in range(total_len):
            heapq.heappush(max_heap, -nums[i])
            left_sum += nums[i]
            if len(max_heap) > n:
                left_sum += heapq.heappop(max_heap)  # subtract largest (negative value)
            if i >= n - 1:
                left_prefix[i] = left_sum

        # Min heap for right part
        min_heap = []
        right_sum = 0
        right_suffix = [0] * (total_len + 1)

        for i in range(total_len - 1, -1, -1):
            heapq.heappush(min_heap, nums[i])
            right_sum += nums[i]
            if len(min_heap) > n:
                right_sum -= heapq.heappop(min_heap)
            if i <= total_len - n:
                right_suffix[i] = right_sum

        # Compute minimum difference
        min_diff = float('inf')
        for i in range(n - 1, 2 * n):
            min_diff = min(min_diff, left_prefix[i] - right_suffix[i + 1])

        return min_diff
